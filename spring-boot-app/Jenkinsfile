pipeline {
  agent {
    docker {
      image 'revanth1209/revanth-maven-docker:v2'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }
  
  stages {
    
    stage('Checkout') {
      steps {
        git branch: 'main', url: 'https://github.com/manika-Revanth/jenkins-cicd-pipeline.git'
      }
    }

    stage('Build and Test') {
      steps {
        dir('spring-boot-app') {
          sh 'mvn clean package'
        }
      }
    }

    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://10.0.2.15:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          dir('spring-boot-app') {
            sh '''
              mvn sonar:sonar \
                -Dsonar.login=$SONAR_AUTH_TOKEN \
                -Dsonar.host.url=${SONAR_URL}
            '''
          }
        }
      }
    }

    stage('Build and Push Docker Image') {
  environment {
    DOCKER_IMAGE = "revanth1209/ultimate-cicd:${BUILD_NUMBER}"
  }
  steps {
    script {
      // Build from custom Dockerfile path
      sh "docker build -f spring-boot-app/dockerfile -t ${DOCKER_IMAGE} ."

      // Push the built image
      def dockerImage = docker.image("${DOCKER_IMAGE}")
      docker.withRegistry('https://index.docker.io/v1/', 'docker-revanth') {
        dockerImage.push()
      }
    }
  }
}

    stage('Update Deployment File') {
      environment {
        GIT_REPO_NAME = "Jenkins-maven-cicd-pipeline"
        GIT_USER_NAME = "manika-Revanth"
      }
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
            git config user.email "manikarevanth@gmail.com"
            git config user.name "manika revanth"
            sed -i "s/replaceImageTag/${BUILD_NUMBER}/g jenkins-maven-cicd-pipeline/spring-boot-app-manifests/deployment.yml
            git add jenkins-maven-cicd-pipeline/spring-boot-app-manifests/deployment.yml
            git commit -m "Update deployment image to version ${BUILD_NUMBER}"
            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
          '''
        }
      }
    }
  }

  post {
    success {
      echo '✅ Pipeline completed successfully!'
    }
    failure {
      echo '❌ Pipeline failed! Please check the logs.'
    }
  }
}
